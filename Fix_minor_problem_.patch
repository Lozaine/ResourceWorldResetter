Subject: [PATCH] Fix minor problem.
---
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 81929bd9230c4e83831e89b9636e062a4ca1bf1e)
+++ b/.idea/gradle.xml	(date 1727426774960)
@@ -5,6 +5,11 @@
       <GradleProjectSettings>
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
         <option name="gradleHome" value="" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+          </set>
+        </option>
       </GradleProjectSettings>
     </option>
   </component>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 81929bd9230c4e83831e89b9636e062a4ca1bf1e)
+++ b/.idea/misc.xml	(date 1727429141618)
@@ -1,7 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="23" project-jdk-type="JavaSDK">
+  <component name="FrameworkDetectionExcludesConfiguration">
+    <file type="web" url="file://$PROJECT_DIR$" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="azul-17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/resources/config.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/config.yml b/src/main/resources/config.yml
new file mode 100644
--- /dev/null	(date 1727433604374)
+++ b/src/main/resources/config.yml	(date 1727433604374)
@@ -0,0 +1,4 @@
+worldName: ""      # The world to reset
+resetWarningTime: 5         # Time (in minutes) to warn players before reset
+resetInterval: 86400        # Time (in seconds) between resets (e.g., 24 hours = 86400)
+restartTime: 3              # Server restart time (3 AM by default)
Index: src/main/java/com/lozaine/ResourceWorldResetter/ResourceWorldResetter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/lozaine/ResourceWorldResetter/ResourceWorldResetter.java b/src/main/java/com/lozaine/ResourceWorldResetter/ResourceWorldResetter.java
--- a/src/main/java/com/lozaine/ResourceWorldResetter/ResourceWorldResetter.java	(revision 81929bd9230c4e83831e89b9636e062a4ca1bf1e)
+++ b/src/main/java/com/lozaine/ResourceWorldResetter/ResourceWorldResetter.java	(date 1727440486243)
@@ -1,19 +1,30 @@
-package com.yourname.resourceworldresetter;
+package com.lozaine.ResourceWorldResetter;
 
 import org.bukkit.Bukkit;
 import org.bukkit.World;
+import org.bukkit.WorldType;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.java.JavaPlugin;
 import org.bukkit.scheduler.BukkitRunnable;
 import com.onarandombox.MultiverseCore.MultiverseCore;
 import com.onarandombox.MultiverseCore.api.MVWorldManager;
 
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+
 public class ResourceWorldResetter extends JavaPlugin {
-    private String worldName = "resources";
+    private String worldName;
     private MultiverseCore core;
+    private long resetInterval;
+    private int restartTime;
 
     @Override
     public void onEnable() {
+        // Save default config if not present
+        this.saveDefaultConfig();
+
         core = (MultiverseCore) Bukkit.getPluginManager().getPlugin("Multiverse-Core");
         if (core == null) {
             getLogger().severe("Multiverse-Core not found! Disabling plugin.");
@@ -21,21 +32,71 @@
             return;
         }
 
-        // Schedule the reset task
-        this.getServer().getScheduler().scheduleSyncRepeatingTask(this, this::scheduleReset, 0L, 24 * 60 * 60 * 20L);
+        // Retrieve configuration values
+        loadConfig();
+
+        // Check if world exists and try to load
+        loadWorld();
+        scheduleDailyReset(); // Schedule daily resets
+    }
+
+    private void loadConfig() {
+        worldName = getConfig().getString("worldName");
+        resetInterval = getConfig().getLong("resetInterval", 86400); // Default to 24 hours
+        restartTime = getConfig().getInt("restartTime", 3); // Default restart time (3AM)
+
+        if (worldName == null || worldName.isEmpty()) {
+            getLogger().severe("No world name specified in the config file! Please set 'worldName' in the config.yml.");
+            Bukkit.getPluginManager().disablePlugin(this);
+        }
     }
 
-    private void scheduleReset() {
-        // Broadcast warning message 5 minutes before reset
-        Bukkit.broadcastMessage("§c[WARNING] Resource world will reset in 5 minutes!");
+    private void loadWorld() {
+        World world = Bukkit.getWorld(worldName);
+        if (world == null) {
+            getLogger().info("World '" + worldName + "' does not exist! Attempting to create...");
+            MVWorldManager worldManager = core.getMVWorldManager();
+            boolean createSuccess = worldManager.addWorld(worldName, World.Environment.NORMAL, null, WorldType.NORMAL, true, null);
+
+            if (!createSuccess || Bukkit.getWorld(worldName) == null) {
+                getLogger().severe("Failed to create world '" + worldName + "'. Disabling plugin.");
+                Bukkit.getPluginManager().disablePlugin(this);
+            } else {
+                getLogger().info("World '" + worldName + "' created successfully.");
+            }
+        } else {
+            getLogger().info("World '" + worldName + "' loaded successfully.");
+        }
+    }
+
+    private void scheduleDailyReset() {
+        LocalDateTime now = LocalDateTime.now();
+        LocalTime resetTime = LocalTime.of(restartTime, 0);
+
+        LocalDateTime nextReset = now.with(resetTime);
+        if (now.isAfter(nextReset)) {
+            nextReset = nextReset.plusDays(1);
+        }
+
+        long delay = java.time.Duration.between(now, nextReset).toSeconds();
+        long warningDelay = delay - 300; // 5 minutes before reset
+
+        // Schedule the announcement
+        new BukkitRunnable() {
+            @Override
+            public void run() {
+                Bukkit.broadcastMessage("§eWarning: The resource world will reset in 5 minutes!");
+            }
+        }.runTaskLater(this, warningDelay * 20L); // Convert seconds to ticks
 
         // Schedule the actual reset
         new BukkitRunnable() {
             @Override
             public void run() {
                 resetResourceWorld();
+                scheduleDailyReset(); // Reschedule for the next day
             }
-        }.runTaskLater(this, 5 * 60 * 20L); // 5 minutes later
+        }.runTaskLater(this, delay * 20L); // Convert seconds to ticks
     }
 
     private void resetResourceWorld() {
@@ -45,24 +106,110 @@
             return;
         }
 
-        // Teleport all players out of the resource world
         for (Player player : world.getPlayers()) {
             player.teleport(Bukkit.getWorlds().get(0).getSpawnLocation());
             player.sendMessage("§eYou have been teleported out of the resource world due to a reset.");
         }
 
-        // Disable access to the world
         MVWorldManager worldManager = core.getMVWorldManager();
-        worldManager.unloadWorld(worldName);
+        boolean unloadSuccess = worldManager.unloadWorld(worldName);
+        if (!unloadSuccess) {
+            getLogger().severe("Failed to unload resource world!");
+            return;
+        }
+
+        boolean deleteSuccess = worldManager.deleteWorld(worldName, true, true);
+        if (!deleteSuccess) {
+            getLogger().severe("Failed to delete resource world!");
+            return;
+        }
+
+        boolean createSuccess = worldManager.addWorld(worldName, World.Environment.NORMAL, null, WorldType.NORMAL, true, null);
+        if (!createSuccess) {
+            getLogger().severe("Failed to create new resource world!");
+            return;
+        }
+
+        Bukkit.broadcastMessage("§aThe resource world has been successfully reset!");
+    }
+
+    @Override
+    public void onDisable() {
+        getLogger().info("ResourceWorldResetter has been disabled.");
+    }
 
-        // Delete and recreate the world
-        worldManager.deleteWorld(worldName);
-        worldManager.addWorld(worldName, World.Environment.NORMAL, null, World.Type.NORMAL, true, null);
+    // Handle commands for setting world, reset interval, etc.
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        if (!(sender instanceof Player) || sender.hasPermission("resourceworldresetter.admin")) {
+            if (command.getName().equalsIgnoreCase("setworld")) {
+                if (args.length > 0) {
+                    worldName = args[0];
+                    getConfig().set("worldName", worldName);
+                    saveConfig();
+                    sender.sendMessage("§aResource world set to: " + worldName);
+                    loadWorld();
+                } else {
+                    sender.sendMessage("§cUsage: /setworld <worldname>");
+                }
+                return true;
+            } else if (command.getName().equalsIgnoreCase("setresetinterval")) {
+                if (args.length > 0) {
+                    try {
+                        resetInterval = Long.parseLong(args[0]) * 60 * 60; // Convert hours to seconds
+                        getConfig().set("resetInterval", resetInterval);
+                        saveConfig();
+                        sender.sendMessage("§aReset interval set to " + args[0] + " hours.");
+                    } catch (NumberFormatException e) {
+                        sender.sendMessage("§cPlease provide a valid number.");
+                    }
+                } else {
+                    sender.sendMessage("§cUsage: /setresetinterval <hours>");
+                }
+                return true;
+            } else if (command.getName().equalsIgnoreCase("setrestarttime")) {
+                if (args.length > 0) {
+                    try {
+                        restartTime = Integer.parseInt(args[0]);
+                        getConfig().set("restartTime", restartTime);
+                        saveConfig();
+                        sender.sendMessage("§aServer restart time set to: " + restartTime + ":00");
+                        scheduleDailyReset(); // Reschedule if the time changes
+                    } catch (NumberFormatException e) {
+                        sender.sendMessage("§cPlease provide a valid hour (0-23).");
+                    }
+                } else {
+                    sender.sendMessage("§cUsage: /setrestarttime <hour>");
+                }
+                return true;
+            } else if (command.getName().equalsIgnoreCase("resetworld")) {
+                resetResourceWorld();
+                sender.sendMessage("§aResource world has been reset!");
+                return true;
+            } else if (command.getName().equalsIgnoreCase("reloadworldresetter")) {
+                if (sender.hasPermission("resourceworldresetter.reload")) {
+                    reloadPlugin(sender);
+                } else {
+                    sender.sendMessage("§cYou do not have permission to use this command.");
+                }
+                return true;
+            }
+        } else {
+            sender.sendMessage("§cYou do not have permission to use this command.");
+        }
+        return false;
+    }
 
-        // Enable access to the world
-        worldManager.loadWorld(worldName);
+    private void reloadPlugin(CommandSender sender) {
+        this.reloadConfig();
+        loadConfig(); // Reload configuration values
 
-        // Broadcast completion message
-        Bukkit.broadcastMessage("§a[NOTICE] Resource world has been reset and is now available!");
+        // Check if world exists and load it
+        loadWorld();
+
+        // Reschedule the daily reset task
+        scheduleDailyReset();
+
+        sender.sendMessage("§aResourceWorldResetter plugin has been reloaded successfully.");
     }
-}
\ No newline at end of file
+}
Index: src/main/resources/plugin.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml
--- a/src/main/resources/plugin.yml	(revision 81929bd9230c4e83831e89b9636e062a4ca1bf1e)
+++ b/src/main/resources/plugin.yml	(date 1727440582169)
@@ -1,0 +1,33 @@
+name: ResourceWorldResetter
+version: '1.0'
+main: com.lozaine.ResourceWorldResetter.ResourceWorldResetter
+api-version: 1.19
+depend: [Multiverse-Core]
+author: Lozaine
+description: A plugin to reset the resources world at regular intervals.
+
+commands:
+  setworld:
+    description: "Set the resource world name"
+    usage: "/setworld <worldname>"
+    permission: "resourceworldresetter.admin"
+
+  setresetinterval:
+    description: "Set the reset interval in hours"
+    usage: "/setresetinterval <hours>"
+    permission: "resourceworldresetter.admin"
+
+  setrestarttime:
+    description: "Set the server restart time"
+    usage: "/setrestarttime <hour>"
+    permission: "resourceworldresetter.admin"
+
+  resetworld:
+    description: "Force reset the resource world"
+    usage: "/resetworld"
+    permission: "resourceworldresetter.admin"
+
+  reloadworldresetter:
+    description: "Reload the ResourceWorldResetter plugin"
+    usage: "/reloadworldresetter"
+    permission: "resourceworldresetter.admin"
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 81929bd9230c4e83831e89b9636e062a4ca1bf1e)
+++ b/build.gradle	(date 1727429639259)
@@ -2,18 +2,24 @@
     id 'java'
 }
 
-group = 'com.lozaine.ResourceWorldResetter'
-version = '1.0-SNAPSHOT'
+group 'com.lozaine'
+version '1.0-SNAPSHOT'
 
 repositories {
     mavenCentral()
+    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
+    maven { url 'https://repo.onarandombox.com/content/groups/public/' }
 }
 
 dependencies {
-    testImplementation platform('org.junit:junit-bom:5.10.0')
-    testImplementation 'org.junit.jupiter:junit-jupiter'
+    compileOnly 'org.spigotmc:spigot-api:1.19.4-R0.1-SNAPSHOT'
+    compileOnly 'com.onarandombox.multiversecore:Multiverse-Core:4.3.1'
 }
 
-test {
-    useJUnitPlatform()
-}
\ No newline at end of file
+jar {
+    manifest {
+        attributes(
+                'Main-Class': 'com.lozaine.ResourceWorldResetter.ResourceWorldResetter'
+        )
+    }
+}
